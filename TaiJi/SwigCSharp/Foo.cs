//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Foo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Foo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Foo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Foo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigCplusplusPINVOKE.delete_Foo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void add(SWIGTYPE_p_int a, SWIGTYPE_p_int b, SWIGTYPE_p_int result) {
    SwigCplusplusPINVOKE.Foo_add(swigCPtr, SWIGTYPE_p_int.getCPtr(a), SWIGTYPE_p_int.getCPtr(b), SWIGTYPE_p_int.getCPtr(result));
  }

  public void spam1(Foo x) {
    SwigCplusplusPINVOKE.Foo_spam1(swigCPtr, Foo.getCPtr(x));
  }

  public void spam2(Foo x) {
    SwigCplusplusPINVOKE.Foo_spam2(swigCPtr, Foo.getCPtr(x));
    if (SwigCplusplusPINVOKE.SWIGPendingException.Pending) throw SwigCplusplusPINVOKE.SWIGPendingException.Retrieve();
  }

  public void spam3(Foo x) {
    SwigCplusplusPINVOKE.Foo_spam3(swigCPtr, Foo.getCPtr(x));
    if (SwigCplusplusPINVOKE.SWIGPendingException.Pending) throw SwigCplusplusPINVOKE.SWIGPendingException.Retrieve();
  }

  public void spam4(Foo x) {
    SwigCplusplusPINVOKE.Foo_spam4(swigCPtr, Foo.getCPtr(x));
  }

  public Foo() : this(SwigCplusplusPINVOKE.new_Foo(), true) {
  }

}
