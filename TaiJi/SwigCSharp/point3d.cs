//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class point3d : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal point3d(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(point3d obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~point3d() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigCplusplusPINVOKE.delete_point3d(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public point3d() : this(SwigCplusplusPINVOKE.new_point3d__SWIG_0(), true) {
  }

  public point3d(double xx, double yy, double zz) : this(SwigCplusplusPINVOKE.new_point3d__SWIG_1(xx, yy, zz), true) {
  }

  public point3d add_point(point3d vec) {
    point3d ret = new point3d(SwigCplusplusPINVOKE.point3d_add_point(swigCPtr, point3d.getCPtr(vec)), true);
    if (SwigCplusplusPINVOKE.SWIGPendingException.Pending) throw SwigCplusplusPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double x {
    set {
      SwigCplusplusPINVOKE.point3d_x_set(swigCPtr, value);
    } 
    get {
      double ret = SwigCplusplusPINVOKE.point3d_x_get(swigCPtr);
      return ret;
    } 
  }

  public double y {
    set {
      SwigCplusplusPINVOKE.point3d_y_set(swigCPtr, value);
    } 
    get {
      double ret = SwigCplusplusPINVOKE.point3d_y_get(swigCPtr);
      return ret;
    } 
  }

  public double z {
    set {
      SwigCplusplusPINVOKE.point3d_z_set(swigCPtr, value);
    } 
    get {
      double ret = SwigCplusplusPINVOKE.point3d_z_get(swigCPtr);
      return ret;
    } 
  }

}
