//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class gmeParseObj : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal gmeParseObj(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(gmeParseObj obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~gmeParseObj() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SwigCplusplusPINVOKE.delete_gmeParseObj(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public gmeParseObj() : this(SwigCplusplusPINVOKE.new_gmeParseObj(), true) {
  }

  public void fillPoints(vec3ds pnts) {
    SwigCplusplusPINVOKE.gmeParseObj_fillPoints(swigCPtr, vec3ds.getCPtr(pnts));
    if (SwigCplusplusPINVOKE.SWIGPendingException.Pending) throw SwigCplusplusPINVOKE.SWIGPendingException.Retrieve();
  }

  public void fillTriangles(vecTris tris) {
    SwigCplusplusPINVOKE.gmeParseObj_fillTriangles(swigCPtr, vecTris.getCPtr(tris));
    if (SwigCplusplusPINVOKE.SWIGPendingException.Pending) throw SwigCplusplusPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setObjName(string name) {
    SwigCplusplusPINVOKE.gmeParseObj_setObjName(swigCPtr, name);
    if (SwigCplusplusPINVOKE.SWIGPendingException.Pending) throw SwigCplusplusPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getPointsNum() {
    int ret = SwigCplusplusPINVOKE.gmeParseObj_getPointsNum(swigCPtr);
    return ret;
  }

  public int getTrianglesNum() {
    int ret = SwigCplusplusPINVOKE.gmeParseObj_getTrianglesNum(swigCPtr);
    return ret;
  }

  public string getName() {
    string ret = SwigCplusplusPINVOKE.gmeParseObj_getName(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_int_t getBatchId() {
    SWIGTYPE_p_std__vectorT_int_t ret = new SWIGTYPE_p_std__vectorT_int_t(SwigCplusplusPINVOKE.gmeParseObj_getBatchId(swigCPtr), true);
    return ret;
  }

}
